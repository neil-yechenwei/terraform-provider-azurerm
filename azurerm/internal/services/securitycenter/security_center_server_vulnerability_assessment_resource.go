package securitycenter

import (
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/azure"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/tf"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/clients"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/services/securitycenter/parse"
	azSchema "github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/tf/schema"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/timeouts"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/utils"
)

func resourceSecurityCenterServerVulnerabilityAssessment() *schema.Resource {
	return &schema.Resource{
		Create: resourceSecurityCenterServerVulnerabilityAssessmentCreateUpdate,
		Read:   resourceSecurityCenterServerVulnerabilityAssessmentRead,
		Update: resourceSecurityCenterServerVulnerabilityAssessmentCreateUpdate,
		Delete: resourceSecurityCenterServerVulnerabilityAssessmentDelete,

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(30 * time.Minute),
			Read:   schema.DefaultTimeout(5 * time.Minute),
			Update: schema.DefaultTimeout(30 * time.Minute),
			Delete: schema.DefaultTimeout(30 * time.Minute),
		},

		Importer: azSchema.ValidateResourceIDPriorToImport(func(id string) error {
			_, err := parse.SecurityCenterServerVulnerabilityAssessmentID(id)
			return err
		}),

		Schema: map[string]*schema.Schema{
			"resource_group_name": azure.SchemaResourceGroupName(),

			"target_resource_name": {
				Type:     schema.TypeString,
				Required: true,
			},

			"target_resource_namespace": {
				Type:     schema.TypeString,
				Required: true,
			},

			"target_resource_type": {
				Type:     schema.TypeString,
				Required: true,
			},
		},
	}
}

func resourceSecurityCenterServerVulnerabilityAssessmentCreateUpdate(d *schema.ResourceData, meta interface{}) error {
	subscriptionId := meta.(*clients.Client).Account.SubscriptionId
	client := meta.(*clients.Client).SecurityCenter.ServerVulnerabilityAssessmentClient
	ctx, cancel := timeouts.ForCreateUpdate(meta.(*clients.Client).StopContext, d)
	defer cancel()

	resourceGroup := d.Get("resource_group_name").(string)
	targetResourceName := d.Get("target_resource_name").(string)
	targetResourceNamespace := d.Get("target_resource_namespace").(string)
	targetResourceType := d.Get("target_resource_type").(string)

	id := parse.NewSecurityCenterServerVulnerabilityAssessmentID(subscriptionId, resourceGroup, targetResourceNamespace, targetResourceType, targetResourceName)

	if d.IsNewResource() {
		existing, err := client.Get(ctx, resourceGroup, targetResourceNamespace, targetResourceType, targetResourceName)
		if err != nil {
			if !utils.ResponseWasNotFound(existing.Response) {
				return fmt.Errorf("checking for present of existing Security Center Server Vulnerability Assessment (Resource Group %q / Target Resource Namespace %q / Target Resource Type %q / Target Resource Name %q): %+v", resourceGroup, targetResourceNamespace, targetResourceType, targetResourceName, err)
			}
		}

		if existing.ID != nil && *existing.ID != "" {
			return tf.ImportAsExistsError("azurerm_security_center_server_vulnerability_assessment", id.ID())
		}
	}

	if _, err := client.CreateOrUpdate(ctx, resourceGroup, targetResourceNamespace, targetResourceType, targetResourceName); err != nil {
		return fmt.Errorf("creating/updating Security Center Server Vulnerability Assessment (Resource Group %q / Target Resource Namespace %q / Target Resource Type %q / Target Resource Name %q): %+v", resourceGroup, targetResourceNamespace, targetResourceType, targetResourceName, err)
	}

	d.SetId(id.ID())

	return resourceSecurityCenterServerVulnerabilityAssessmentRead(d, meta)
}

func resourceSecurityCenterServerVulnerabilityAssessmentRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).SecurityCenter.ServerVulnerabilityAssessmentClient
	ctx, cancel := timeouts.ForRead(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := parse.SecurityCenterServerVulnerabilityAssessmentID(d.Id())
	if err != nil {
		return err
	}

	resp, err := client.Get(ctx, id.TargetResourceGroup, id.TargetResourceNamespace, id.TargetResourceType, id.TargetResourceName)
	if err != nil {
		if utils.ResponseWasNotFound(resp.Response) {
			log.Printf("[INFO] security Center Server Vulnerability Assessment %q does not exist - removing from state", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("retrieving Security Center Server Vulnerability Assessment (Resource Group %q / Target Resource Namespace %q / Target Resource Type %q / Target Resource Name %q): %+v", id.TargetResourceGroup, id.TargetResourceNamespace, id.TargetResourceType, id.TargetResourceName, err)
	}

	d.Set("resource_group_name", id.TargetResourceGroup)
	d.Set("target_resource_namespace", id.TargetResourceNamespace)
	d.Set("target_resource_type", id.TargetResourceType)
	d.Set("target_resource_name", id.TargetResourceName)

	return nil
}

func resourceSecurityCenterServerVulnerabilityAssessmentDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*clients.Client).SecurityCenter.ServerVulnerabilityAssessmentClient
	ctx, cancel := timeouts.ForDelete(meta.(*clients.Client).StopContext, d)
	defer cancel()

	id, err := parse.SecurityCenterServerVulnerabilityAssessmentID(d.Id())
	if err != nil {
		return err
	}

	if _, err := client.Delete(ctx, id.TargetResourceGroup, id.TargetResourceNamespace, id.TargetResourceType, id.TargetResourceName); err != nil {
		return fmt.Errorf("deleting Security Center Server Vulnerability Assessment (Resource Group %q / Target Resource Namespace %q / Target Resource Type %q / Target Resource Name %q): %+v", id.TargetResourceGroup, id.TargetResourceNamespace, id.TargetResourceType, id.TargetResourceName, err)
	}

	return nil
}
