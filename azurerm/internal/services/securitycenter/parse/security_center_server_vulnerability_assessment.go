package parse

import (
	"fmt"
	"strings"

	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/azure"
)

type SecurityCenterServerVulnerabilityAssessmentId struct {
	SubscriptionId          string
	TargetResourceGroup     string
	TargetResourceNamespace string
	TargetResourceType      string
	TargetResourceName      string
}

func NewSecurityCenterServerVulnerabilityAssessmentID(subscriptionId, resourceGroup, resourceNamespace, resourceType, resourceName string) SecurityCenterServerVulnerabilityAssessmentId {
	return SecurityCenterServerVulnerabilityAssessmentId{
		SubscriptionId:          subscriptionId,
		TargetResourceGroup:     resourceGroup,
		TargetResourceNamespace: resourceNamespace,
		TargetResourceType:      resourceType,
		TargetResourceName:      resourceName,
	}
}

func (id SecurityCenterServerVulnerabilityAssessmentId) String() string {
	segments := []string{
		fmt.Sprintf("Target Resource Name %q", id.TargetResourceName),
		fmt.Sprintf("Target Resource Type %q", id.TargetResourceType),
		fmt.Sprintf("Target Resource Namespace %q", id.TargetResourceNamespace),
		fmt.Sprintf("Target Resource Group %q", id.TargetResourceGroup),
	}
	segmentsStr := strings.Join(segments, " / ")
	return fmt.Sprintf("%s: (%s)", "Security Center Server Vulnerability Assessment", segmentsStr)
}

func (id SecurityCenterServerVulnerabilityAssessmentId) ID() string {
	fmtString := "/subscriptions/%s/resourcegroups/%s/providers/%s/%s/%s/providers/Microsoft.Security/serverVulnerabilityAssessments/default"
	return fmt.Sprintf(fmtString, id.SubscriptionId, id.TargetResourceGroup, id.TargetResourceNamespace, id.TargetResourceType, id.TargetResourceName)
}

func SecurityCenterServerVulnerabilityAssessmentID(input string) (*SecurityCenterServerVulnerabilityAssessmentId, error) {
	resourceProviders := strings.Split(input, "/providers/")
	if len(resourceProviders) != 3 {
		return nil, fmt.Errorf("the Security Center Server Vulnerability Assessment ID should contain two providers")
	}

	targetResourceId := resourceProviders[0] + "/providers/" + resourceProviders[1]
	id, err := azure.ParseAzureResourceID(targetResourceId)
	if err != nil {
		return nil, err
	}

	resourceId := SecurityCenterServerVulnerabilityAssessmentId{
		SubscriptionId:          id.SubscriptionID,
		TargetResourceGroup:     id.ResourceGroup,
		TargetResourceNamespace: id.Provider,
	}

	if resourceId.SubscriptionId == "" {
		return nil, fmt.Errorf("ID was missing the 'subscriptions' element")
	}

	if resourceId.TargetResourceGroup == "" {
		return nil, fmt.Errorf("ID was missing the 'resourcegroups' element")
	}

	for resourceType, resourceName := range id.Path {
		resourceId.TargetResourceType = resourceType
		resourceId.TargetResourceName = resourceName
	}

	return &resourceId, nil
}
