package parse

// NOTE: this file is generated via 'go:generate' - manual changes will be overwritten

import (
	"testing"

	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/resourceid"
)

var _ resourceid.Formatter = SecurityCenterServerVulnerabilityAssessmentId{}

func TestSecurityCenterServerVulnerabilityAssessmentIDFormatter(t *testing.T) {
	actual := NewSecurityCenterServerVulnerabilityAssessmentID("12345678-1234-9876-4563-123456789012", "group1", "Microsoft.Compute", "virtualMachines", "vm1").ID()
	expected := "/subscriptions/12345678-1234-9876-4563-123456789012/resourcegroups/group1/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.Security/serverVulnerabilityAssessments/assessment1"
	if actual != expected {
		t.Fatalf("Expected %q but got %q", expected, actual)
	}
}

func TestSecurityCenterServerVulnerabilityAssessmentID(t *testing.T) {
	testData := []struct {
		Input    string
		Error    bool
		Expected *SecurityCenterServerVulnerabilityAssessmentId
	}{
		{
			// empty
			Input: "",
			Error: true,
		},
		{
			// missing SubscriptionId
			Input: "/",
			Error: true,
		},
		{
			// missing value for SubscriptionId
			Input: "/subscriptions/",
			Error: true,
		},
		{
			// missing ResourceGroup
			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/",
			Error: true,
		},
		{
			// missing value for ResourceGroup
			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourcegroups/",
			Error: true,
		},
		{
			// missing VirtualMachineName
			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourcegroups/group1/providers/Microsoft.Compute/",
			Error: true,
		},
		{
			// missing value for VirtualMachineName
			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourcegroups/group1/providers/Microsoft.Compute/virtualMachines/",
			Error: true,
		},
		{
			// valid
			Input: "/subscriptions/12345678-1234-9876-4563-123456789012/resourcegroups/group1/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.Security/serverVulnerabilityAssessments/default",
			Expected: &SecurityCenterServerVulnerabilityAssessmentId{
				SubscriptionId:          "12345678-1234-9876-4563-123456789012",
				TargetResourceGroup:     "group1",
				TargetResourceNamespace: "Microsoft.Compute",
				TargetResourceType:      "virtualMachines",
				TargetResourceName:      "vm1",
			},
		},
		{
			// upper-cased
			Input: "/SUBSCRIPTIONS/12345678-1234-9876-4563-123456789012/RESOURCEGROUPS/GROUP1/PROVIDERS/MICROSOFT.COMPUTE/VIRTUALMACHINES/VM1/PROVIDERS/MICROSOFT.SECURITY/SERVERVULNERABILITYASSESSMENTS/ASSESSMENT1",
			Error: true,
		},
	}

	for _, v := range testData {
		t.Logf("[DEBUG] Testing %q", v.Input)

		actual, err := SecurityCenterServerVulnerabilityAssessmentID(v.Input)
		if err != nil {
			if v.Error {
				continue
			}

			t.Fatalf("Expect a value but got an error: %s", err)
		}
		if v.Error {
			t.Fatal("Expect an error but didn't get one")
		}

		if actual.SubscriptionId != v.Expected.SubscriptionId {
			t.Fatalf("Expected %q but got %q for SubscriptionId", v.Expected.SubscriptionId, actual.SubscriptionId)
		}
		if actual.TargetResourceGroup != v.Expected.TargetResourceGroup {
			t.Fatalf("Expected %q but got %q for ResourceGroup", v.Expected.TargetResourceGroup, actual.TargetResourceGroup)
		}
		if actual.TargetResourceNamespace != v.Expected.TargetResourceNamespace {
			t.Fatalf("Expected %q but got %q for ResourceNamespace", v.Expected.TargetResourceNamespace, actual.TargetResourceNamespace)
		}
		if actual.TargetResourceType != v.Expected.TargetResourceType {
			t.Fatalf("Expected %q but got %q for ResourceType", v.Expected.TargetResourceType, actual.TargetResourceType)
		}
		if actual.TargetResourceName != v.Expected.TargetResourceName {
			t.Fatalf("Expected %q but got %q for ResourceName", v.Expected.TargetResourceName, actual.TargetResourceName)
		}
	}
}
