package securitycenter_test

import (
	"context"
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/terraform"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/acceptance"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/acceptance/check"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/clients"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/services/securitycenter/parse"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/utils"
)

type SecurityCenterServerVulnerabilityAssessmentResource struct{}

func TestAccSecurityCenterServerVulnerabilityAssessment_basic(t *testing.T) {
	data := acceptance.BuildTestData(t, "azurerm_security_center_server_vulnerability_assessment", "test")
	r := SecurityCenterServerVulnerabilityAssessmentResource{}

	data.ResourceTest(t, r, []resource.TestStep{
		{
			Config: r.basic(data),
			Check: resource.ComposeTestCheckFunc(
				check.That(data.ResourceName).ExistsInAzure(r),
			),
		},
		data.ImportStep(),
	})
}

func TestAccSecurityCenterServerVulnerabilityAssessment_requiresImport(t *testing.T) {
	data := acceptance.BuildTestData(t, "azurerm_security_center_server_vulnerability_assessment", "test")
	r := SecurityCenterServerVulnerabilityAssessmentResource{}

	data.ResourceTest(t, r, []resource.TestStep{
		{
			Config: r.basic(data),
			Check: resource.ComposeTestCheckFunc(
				check.That(data.ResourceName).ExistsInAzure(r),
			),
		},
		data.RequiresImportErrorStep(r.requiresImport),
	})
}

func TestAccSecurityCenterServerVulnerabilityAssessment_update(t *testing.T) {
	data := acceptance.BuildTestData(t, "azurerm_security_center_server_vulnerability_assessment", "test")
	r := SecurityCenterServerVulnerabilityAssessmentResource{}

	data.ResourceTest(t, r, []resource.TestStep{
		{
			Config: r.basic(data),
			Check: resource.ComposeTestCheckFunc(
				check.That(data.ResourceName).ExistsInAzure(r),
			),
		},
		data.ImportStep(),
		{
			Config: r.update(data),
			Check: resource.ComposeTestCheckFunc(
				check.That(data.ResourceName).ExistsInAzure(r),
			),
		},
		data.ImportStep(),
	})
}

func (SecurityCenterServerVulnerabilityAssessmentResource) Exists(ctx context.Context, clients *clients.Client, state *terraform.InstanceState) (*bool, error) {
	id, err := parse.SecurityCenterServerVulnerabilityAssessmentID(state.ID)
	if err != nil {
		return nil, err
	}

	resp, err := clients.SecurityCenter.ServerVulnerabilityAssessmentClient.Get(ctx, id.TargetResourceGroup, id.TargetResourceNamespace, id.TargetResourceType, id.TargetResourceName)
	if err != nil {
		return nil, fmt.Errorf("reading Security Center Server Vulnerability Assessment (default): %+v", err)
	}

	return utils.Bool(resp.ID != nil), nil
}

func (r SecurityCenterServerVulnerabilityAssessmentResource) basic(data acceptance.TestData) string {
	return fmt.Sprintf(`
%s

resource "azurerm_security_center_server_vulnerability_assessment" "test" {
  resource_group_name       = azurerm_resource_group.test.name
  target_resource_namespace = "Microsoft.Compute"
  target_resource_type      = "virtualMachines"
  target_resource_name      = azurerm_linux_virtual_machine.test.name
}
`, r.template(data))
}

func (r SecurityCenterServerVulnerabilityAssessmentResource) requiresImport(data acceptance.TestData) string {
	return fmt.Sprintf(`
%s

resource "azurerm_security_center_server_vulnerability_assessment" "import" {
  resource_group_name       = azurerm_security_center_server_vulnerability_assessment.test.resource_group_name
  target_resource_namespace = azurerm_security_center_server_vulnerability_assessment.test.target_resource_namespace
  target_resource_type      = azurerm_security_center_server_vulnerability_assessment.test.target_resource_type
  target_resource_name      = azurerm_security_center_server_vulnerability_assessment.test.target_resource_name
}
`, r.basic(data))
}

func (r SecurityCenterServerVulnerabilityAssessmentResource) update(data acceptance.TestData) string {
	return fmt.Sprintf(`
%s

resource "azurerm_virtual_network" "test2" {
  name                = "acctest-VNET2-%d"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group.test.location
  resource_group_name = azurerm_resource_group.test.name
}

resource "azurerm_subnet" "test2" {
  name                 = "acctest-SUBNET2-%d"
  resource_group_name  = azurerm_resource_group.test.name
  virtual_network_name = azurerm_virtual_network.test2.name
  address_prefixes     = ["10.0.2.0/24"]
}

resource "azurerm_network_interface" "test2" {
  name                = "acctest-NIC2-%d"
  location            = azurerm_resource_group.test.location
  resource_group_name = azurerm_resource_group.test.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.test2.id
    private_ip_address_allocation = "Dynamic"
  }
}

resource "azurerm_linux_virtual_machine" "test2" {
  name                            = "acctest-VM2-%d"
  resource_group_name             = azurerm_resource_group.test.name
  location                        = azurerm_resource_group.test.location
  size                            = "Standard_F2"
  admin_username                  = "adminuser"
  admin_password                  = "P@ssw0rd1234!"
  disable_password_authentication = false

  network_interface_ids = [
    azurerm_network_interface.test2.id,
  ]

  source_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "16.04-LTS"
    version   = "latest"
  }

  os_disk {
    storage_account_type = "Standard_LRS"
    caching              = "ReadWrite"
  }
}

resource "azurerm_security_center_server_vulnerability_assessment" "test" {
  resource_group_name       = azurerm_resource_group.test.name
  target_resource_namespace = "Microsoft.Compute"
  target_resource_type      = "virtualMachines"
  target_resource_name      = azurerm_linux_virtual_machine.test2.name
}
`, r.template(data))
}

func (r SecurityCenterServerVulnerabilityAssessmentResource) template(data acceptance.TestData) string {
	return fmt.Sprintf(`
provider "azurerm" {
  features {}
}

resource "azurerm_resource_group" "test" {
  name     = "acctestRG-sva-%d"
  location = "%s"
}

resource "azurerm_virtual_network" "test" {
  name                = "acctest-VNET-%d"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group.test.location
  resource_group_name = azurerm_resource_group.test.name
}

resource "azurerm_subnet" "test" {
  name                 = "acctest-SUBNET-%d"
  resource_group_name  = azurerm_resource_group.test.name
  virtual_network_name = azurerm_virtual_network.test.name
  address_prefixes     = ["10.0.2.0/24"]
}

resource "azurerm_network_interface" "test" {
  name                = "acctest-NIC-%d"
  location            = azurerm_resource_group.test.location
  resource_group_name = azurerm_resource_group.test.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.test.id
    private_ip_address_allocation = "Dynamic"
  }
}

resource "azurerm_linux_virtual_machine" "test" {
  name                            = "acctest-VM-%d"
  resource_group_name             = azurerm_resource_group.test.name
  location                        = azurerm_resource_group.test.location
  size                            = "Standard_F2"
  admin_username                  = "adminuser"
  admin_password                  = "P@ssw0rd1234!"
  disable_password_authentication = false

  network_interface_ids = [
    azurerm_network_interface.test.id,
  ]

  source_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "16.04-LTS"
    version   = "latest"
  }

  os_disk {
    storage_account_type = "Standard_LRS"
    caching              = "ReadWrite"
  }
}
`, data.RandomInteger, data.Locations.Primary, data.RandomInteger, data.RandomInteger, data.RandomInteger, data.RandomInteger)
}
