package azurerm

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/terraform"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/azure"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/tf"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/acceptance"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/clients"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/utils"
)

func TestAccAzureRMMssqlServerVulnerabilityAssessment_basic(t *testing.T) {
	resourceName := "azurerm_mssql_server_vulnerability_assessment.test"
	ri := tf.AccRandTimeInt()

	resource.ParallelTest(t, resource.TestCase{
		PreCheck:     func() { acceptance.PreCheck(t) },
		Providers:    acceptance.SupportedProviders,
		CheckDestroy: testCheckAzureRMStorageAccountSqlServerDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccAzureRMMssqlServerVulnerabilityAssessment_basic(ri, acceptance.Location()),
				Check: resource.ComposeTestCheckFunc(
					testCheckAzureRMMssqlServerVulnerabilityAssessmentExists(resourceName),
				),
			},
			{
				ResourceName:            resourceName,
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"storage_account_access_key"},
			},
		},
	})
}

func TestAccAzureRMMssqlServerVulnerabilityAssessment_update(t *testing.T) {
	resourceName := "azurerm_mssql_server_vulnerability_assessment.test"
	ri := tf.AccRandTimeInt()

	resource.ParallelTest(t, resource.TestCase{
		PreCheck:     func() { acceptance.PreCheck(t) },
		Providers:    acceptance.SupportedProviders,
		CheckDestroy: testCheckAzureRMStorageAccountSqlServerDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccAzureRMMssqlServerVulnerabilityAssessment_basic(ri, acceptance.Location()),
				Check: resource.ComposeTestCheckFunc(
					testCheckAzureRMMssqlServerVulnerabilityAssessmentExists(resourceName),
				),
			},
			{
				ResourceName:            resourceName,
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"storage_account_access_key"},
			},
			{
				Config: testAccAzureRMMssqlServerVulnerabilityAssessment_update(ri, acceptance.Location()),
				Check: resource.ComposeTestCheckFunc(
					testCheckAzureRMMssqlServerVulnerabilityAssessmentExists(resourceName),
					resource.TestCheckResourceAttr(resourceName, "recurring_scans.0.enabled", "true"),
					resource.TestCheckResourceAttr(resourceName, "recurring_scans.0.emails.#", "2"),
					resource.TestCheckResourceAttr(resourceName, "recurring_scans.0.email_subscription_admins", "true"),
				),
			},
			{
				ResourceName:            resourceName,
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"storage_account_access_key"},
			},
		},
	})
}

func testCheckAzureRMMssqlServerVulnerabilityAssessmentExists(resourceName string) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		rs, ok := s.RootModule().Resources[resourceName]
		if !ok {
			return fmt.Errorf("resource not found: %s", resourceName)
		}

		id, err := azure.ParseAzureResourceID(rs.Primary.ID)
		if err != nil {
			return err
		}

		resourceGroupName := id.ResourceGroup
		serverName := id.Path["servers"]

		client := acceptance.AzureProvider.Meta().(*clients.Client).MSSQL.ServerVulnerabilityAssessmentsClient
		ctx := acceptance.AzureProvider.Meta().(*clients.Client).StopContext

		result, err := client.Get(ctx, resourceGroupName, serverName)
		if err != nil {
			if utils.ResponseWasNotFound(result.Response) {
				return fmt.Errorf("vulnerability assessment was not found for resource group %q, sql server %q",
					resourceGroupName, serverName)
			}

			return err
		}

		return nil
	}
}

func testAccAzureRMMssqlServerVulnerabilityAssessment_basic(rInt int, location string) string {
	server := testAccAzureRMMssqlServerVulnerabilityAssessment_server(rInt, location)

	return fmt.Sprintf(`
%s

resource "azurerm_mssql_server_vulnerability_assessment" "test" {
  server_security_alert_policy_id = azurerm_mssql_server_security_alert_policy.test.id
  storage_container_path          = "${azurerm_storage_account.test.primary_blob_endpoint}${azurerm_storage_container.test.name}/"
  storage_account_access_key      = azurerm_storage_account.test.primary_access_key
}
`, server)
}

func testAccAzureRMMssqlServerVulnerabilityAssessment_update(rInt int, location string) string {
	server := testAccAzureRMMssqlServerVulnerabilityAssessment_server(rInt, location)

	return fmt.Sprintf(`
 %s

resource "azurerm_mssql_server_vulnerability_assessment" "test" {
  server_security_alert_policy_id = azurerm_mssql_server_security_alert_policy.test.id
  storage_container_path          = "${azurerm_storage_account.test.primary_blob_endpoint}${azurerm_storage_container.test.name}/"
  storage_account_access_key      = azurerm_storage_account.test.primary_access_key

  recurring_scans {
    enabled                   = true
    email_subscription_admins = true
    emails                    = [
      "email@example1.com",
      "email@example2.com"
    ]
  }
}
 `, server)
}

func testAccAzureRMMssqlServerVulnerabilityAssessment_server(rInt int, location string) string {
	return fmt.Sprintf(`
resource "azurerm_resource_group" "test" {
  name     = "acctestRG-mssql-%d"
  location = "%s"
}

resource "azurerm_sql_server" "test" {
  name                         = "acctestsqlserver%d"
  resource_group_name          = azurerm_resource_group.test.name
  location                     = azurerm_resource_group.test.location
  version                      = "12.0"
  administrator_login          = "mradministrator"
  administrator_login_password = "thisIsDog11"
}

resource "azurerm_storage_account" "test" {
  name                     = "accsa%d"
  resource_group_name      = azurerm_resource_group.test.name
  location                 = "%s"
  account_tier             = "Standard"
  account_replication_type = "GRS"
}

resource "azurerm_storage_container" "test" {
  name                  = "acctestsc%d"
  storage_account_name  = azurerm_storage_account.test.name
  container_access_type = "private"
}

resource "azurerm_mssql_server_security_alert_policy" "test" {
  resource_group_name = azurerm_resource_group.test.name
  server_name         = azurerm_sql_server.test.name
  state               = "Enabled"
}
`, rInt, location, rInt, rInt, location, rInt)
}
